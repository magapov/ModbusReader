#include <QList>

class Filter {
    QList<float> values{0,0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,0};
    const quint16 BL = 50;
    const float B[50] = {
        0.261870265, 0.008086766116,  0.00820340775, 0.008318106644, 0.008431442082,
     0.008541983552, 0.008645290509, 0.008736692369, 0.008814832196, 0.008906969801,
     0.008939513937, 0.009050227702,  0.00912556611, 0.009173437953, 0.009216002189,
     0.009264959022, 0.009328971617, 0.009415902197, 0.009536543861, 0.009699443355,
     0.009387840517, 0.009567369707, 0.009588534012, 0.009607327171,  0.00961864274,
      0.00961864274, 0.009607327171, 0.009588534012, 0.009567369707, 0.009387840517,
     0.009699443355, 0.009536543861, 0.009415902197, 0.009328971617, 0.009264959022,
     0.009216002189, 0.009173437953,  0.00912556611, 0.009050227702, 0.008939513937,
     0.008906969801, 0.008814832196, 0.008736692369, 0.008645290509, 0.008541983552,
     0.008431442082, 0.008318106644,  0.00820340775, 0.008086766116,    0.261870265
    };


public:
    float process(float sample) {
        values.push_front(sample);
        values.pop_back();

        auto i = 0u;
        float res = .0;
        for (auto it = values.begin(); it != values.end() && i < BL; it++, i++)
            res += *it * B[i];
        return res;
    }

    void clear() {
        values = {0,0,0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,0,0};
    }

};
